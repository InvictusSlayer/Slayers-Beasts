subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'

    version = "${mc_version}-${mod_version}"
    group = mod_group

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

    tasks.named('jar', Jar).configure {
        manifest {
            attributes([
                    "Specification-Title"     : mod_name,
                    "Specification-Version"   : mod_version,
                    "Specification-Vendor"    : mod_authors,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    tasks.named('processResources', ProcessResources).configure {
        var replaceProperties = [
                minecraft_version: mc_version, minecraft_version_range: mc_range, fabric_version: fabric_version,
                forge_version: forge_version, forge_version_range: forge_range, loader_version_range: forge_range,
                mod_id: mod_id, mod_group: mod_group, mod_name: mod_name, mod_version: mod_version,
                mod_license: mod_license, mod_authors: mod_authors, mod_description: mod_desc
        ]
        inputs.properties replaceProperties
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand replaceProperties + [project: project]
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release.set(17)
    }
}
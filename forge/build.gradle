plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfigs "${mod_id}.mixins.json", "${mod_id}-forge.mixins.json"
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", "${mod_id}"
            programArgs "--output", project(":common").file("src/generated/resources").absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath
            programArgs "--existing", file("src/generated/resources").absolutePath
            programArgs "--existing", project(":common").file("src/main/resources").absolutePath
            programArgs "--existing", project(":common").file("src/generated/resources").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${mc_version}-${forge_version}"
    modApi "dev.architectury:architectury-forge:${arch_version}"

    modRuntimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
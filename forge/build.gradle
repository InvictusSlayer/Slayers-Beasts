plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

base.archivesName = "${mod_id}-forge"

minecraft {
    mappings channel: 'parchment', version: "${pchmt_date}-${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES' // SCAN/REGISTRIES/REGISTRYDUMP
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile',"${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', project(":common").file('src/generated/resources/'), '--existing', project(":common").file('src/main/resources/'), '--existing', project(":common").file('src/generated/resources/')
        }
    }
}

repositories {
    maven { url = 'https://maven.blamejared.com/' }
    maven { url = 'https://modmaven.dev/' }
    maven { url = "https://api.modrinth.com/maven" }
}

dependencies {
    compileOnly project(":common")

    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${mc_version}-${tb_version}")
//    implementation fg.deobf("maven.modrinth:enderblender:${eb_version}")

//    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
//    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
//    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "${mod_id}-forge.mixins.json"

    debug.verbose = true
    debug.export = true
}

sourceSets.main.resources.srcDir 'src/generated/resources'

tasks.named('processResources', ProcessResources).configure {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(":common").sourceSets.main.resources
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

jar.finalizedBy 'reobfJar'

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
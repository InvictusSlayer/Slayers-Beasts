import com.modrinth.minotaur.TaskModrinthUpload
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "net.darkhax.curseforgegradle" version "1.1.+"
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        data {
            inherit server
            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.existing-dir=${file("src/main/resources")}"
            vmArg "-Dfabric-api.datagen.existing-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.existing-dir=${project(":common").file("src/main/resources")}"
            vmArg "-Dfabric-api.datagen.existing-dir=${project(":common").file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "run-data"
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modApi "dev.architectury:architectury-fabric:${arch_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_version}").exclude(group: "net.fabricmc.fabric-api")
//    modRuntimeOnly "mezz.jei:jei-${mc_version}-fabric:${jei_version}"
    modApi "com.terraformersmc:modmenu:${mm_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

task publishCurseForge(type: TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(curseforge_id, remapJar)
    mainFile.displayName = "${mod_id}-${mc_version}-${mod_version} [NeoForge]"
    mainFile.releaseType = release_type
    mainFile.changelog = "${project.property("changelog")}"
    mainFile.changelogType = "markdown"
    mainFile.addGameVersion(mc_version)
    mainFile.addModLoader("fabric")
    mainFile.addRequirement("architectury-api")
    mainFile.addRequirement("cloth-config")
    mainFile.addRequirement("terrablender-fabric")
}

task publishModrinth(type: TaskModrinthUpload) {
    modrinth {
        token = System.getenv("MODRINTH_TOKEN")
        projectId = modrinth_id
        versionName = "${mod_name} ${mc_version}-${mod_version} [Fabric]"
        versionNumber = "${mod_version}+fabric"
        versionType = release_type
        changelog = "${project.property("changelog")}"
        uploadFile = remapJar
        additionalFiles = [sourcesJar]
        gameVersions = [mc_version]
        loaders = ["fabric"]
        dependencies {
            required.project "architectury-api"
            required.project "cloth-config"
            required.project "terrablender"
        }
    }
}
plugins {
    id "java-library"
    id "maven-publish"
}

base.archivesName = "${mod_id}-${project.name}"
version = "${mc_version}-${mod_version}"
group = mod_group

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
    withJavadocJar()
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

repositories {
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven {
                name = "Sponge"
                url = "https://repo.spongepowered.org/repository/maven-public"
            }
        }
        filter { includeGroupAndSubgroups("org.spongepowered") }
    }
    exclusiveContent {
        forRepositories(
                maven {
                    name = "ParchmentMC"
                    url = "https://maven.parchmentmc.org/"
                },
                maven {
                    name = "NeoForge"
                    url = "https://maven.neoforged.net/releases"
                }
        )
        filter { includeGroup("org.parchmentmc.data") }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "Forge"
        url = "https://maven.minecraftforge.net"
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

["apiElements", "runtimeElements", "sourcesElements", "javadocElements"].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:${project.name}:$version")
        capability("$group:${base.archivesName.get()}:$version")
        capability("$group:$mod_id-${project.name}-$mc_version:$version")
        capability("$group:$mod_id:$version")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

sourcesJar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_$mod_name" }
    }
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_$mod_name" }
    }

    manifest {
        attributes([
                "Specification-Title"    : mod_name,
                "Specification-Vendor"   : mod_authors,
                "Specification-Version"  : project.jar.archiveVersion,
                "Implementation-Title"   : project.name,
                "Implementation-Version" : project.jar.archiveVersion,
                "Implementation-Vendor"  : mod_authors,
                "Built-On-Minecraft"     : mc_version
        ])
    }
}

processResources {
    var expandProps = [
            "mod_id"         : mod_id,         "mod_group"       : mod_group,    "mod_version"  : mod_version,
            "mod_name"       : mod_name,       "mod_authors"     : mod_authors,  "mod_credits"  : mod_credits,
            "mod_license"    : mod_license,    "mod_description" : mod_description,
            "homepage_url"   : homepage_url,   "source_url"      : source_url,   "issue_url"    : issue_url,
            "mc_version"     : mc_version,     "mc_range"        : mc_range,     "java_version" : java_version,
            "fabric_version" : fabric_version, "fabric_loader"   : fabric_loader,
            "forge_version"  : forge_version,  "forge_range"     : forge_range,
            "neo_version"    : neo_version,    "neo_range"       : neo_range,
            "tb_version"     : tb_version,     "cloth_version"   : cloth_version
    ]

    var jsonExpandProps = expandProps.collectEntries {
        key, value -> [(key): value instanceof String ? value.replace("\n", "\\\\n") : value]
    }

    filesMatching(["META-INF/mods.toml", "META-INF/neoforge.mods.toml"]) { expand expandProps }
    filesMatching(["pack.mcmeta", "fabric.mod.json", "*.mixins.json"]) { expand jsonExpandProps }

    inputs.properties(expandProps)
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven { url = System.getenv("local_maven_url") }
    }
}